"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["6291"],{86001:function(e,t,s){s.r(t),s.d(t,{default:()=>h,frontMatter:()=>r,metadata:()=>n,assets:()=>d,toc:()=>l,contentTitle:()=>c});var n=JSON.parse('{"id":"stage-management/host-controls","title":"Stage Host Controls","description":"Stage management APIs for Host in Dyte meetings.","source":"@site/docs/flutter-core/stage-management/host-controls.mdx","sourceDirName":"stage-management","slug":"/stage-management/host-controls","permalink":"/flutter-core/stage-management/host-controls","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"flutter-core","permalink":"/flutter-core/tags/flutter-core"},{"inline":true,"label":"stage","permalink":"/flutter-core/tags/stage"}],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Stage Host Controls","description":"Stage management APIs for Host in Dyte meetings.","sidebar_position":2,"tags":["flutter-core","stage"]},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/flutter-core/stage-management/introduction"},"next":{"title":"Stage Access for Viewers","permalink":"/flutter-core/stage-management/viewer-participants"}}'),a=s("85893"),i=s("50065");let r={title:"Stage Host Controls",description:"Stage management APIs for Host in Dyte meetings.",sidebar_position:2,tags:["flutter-core","stage"]},c=void 0,d={},l=[{value:"List of Stage Access Requests",id:"list-of-stage-access-requests",level:3},{value:"Grant stage access",id:"grant-stage-access",level:3},{value:"Deny stage access",id:"deny-stage-access",level:3},{value:"Kick participant from stage",id:"kick-participant-from-stage",level:3},{value:"Listening to Stage Access Requests",id:"listening-to-stage-access-requests",level:3}];function o(e){let t={admonition:"admonition",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["In a stage management-enabled meeting, a user with the ",(0,a.jsx)(t.code,{children:"selfPermissions.host.canAcceptStageRequests"})," permission as ",(0,a.jsx)(t.code,{children:"true"})," is\nconsidered a host. The ",(0,a.jsx)(t.code,{children:"dyteMobileClient.stage"})," object in Dyte's Flutter Core SDK provides stage management APIs that allow hosts to\nmanage stage access requests, invite participants to the stage, and remove participants from the stage."]}),"\n",(0,a.jsx)(t.h3,{id:"list-of-stage-access-requests",children:"List of Stage Access Requests"}),"\n",(0,a.jsxs)(t.p,{children:["You can retrieve the list of pending stage access requests by accessing the ",(0,a.jsx)(t.code,{children:"dyteMobileClient.stage.accessRequests"})," property. This property\nprovides a list of ",(0,a.jsx)(t.code,{children:"DyteJoinedMeetingParticipant"})," objects who have requested stage access."]}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"If the local user is not a host, this property returns an empty list."})}),"\n",(0,a.jsx)(t.h3,{id:"grant-stage-access",children:"Grant stage access"}),"\n",(0,a.jsxs)(t.p,{children:["A privileged user can grant access to stage for a set of users with ",(0,a.jsx)(t.code,{children:"grantAccess"})," method."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"Parameters"})}),(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"Type"})})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"peer"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.em,{children:"DyteJoinedMeetingParticipant"})})]})})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"dyteClient.stage.grantAccess(peer);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To grant access to all stage requests at a time, you can user ",(0,a.jsx)(t.code,{children:"grantAccessToAll()"})," method. This method takes no parameters."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"dyteClient.stage.grantAccessToAll();\n"})}),"\n",(0,a.jsx)(t.h3,{id:"deny-stage-access",children:"Deny stage access"}),"\n",(0,a.jsxs)(t.p,{children:["A privileged user can deny access to stage for a set of users with ",(0,a.jsx)(t.code,{children:"denyAccess"})," method."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"Parameters"})}),(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"Type"})})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"peer"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.em,{children:"DyteJoinedMeetingParticipant"})})]})})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"dyteClient.stage.denyAccess(peer);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To deny all stage requests at a time, you can user ",(0,a.jsx)(t.code,{children:"denyAccessToAll()"})," method. This method takes no parameters."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"dyteClient.stage.denyAccessToAll();\n"})}),"\n",(0,a.jsx)(t.h3,{id:"kick-participant-from-stage",children:"Kick participant from stage"}),"\n",(0,a.jsxs)(t.p,{children:["A privileged user can kick a participant from stage with ",(0,a.jsx)(t.code,{children:"kick"})," method."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"Parameters"})}),(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"Type"})})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"peer"}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.em,{children:"DyteJoinedMeetingParticipant"})})]})})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"dyteClient.stage.kick(peer);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"listening-to-stage-access-requests",children:"Listening to Stage Access Requests"}),"\n",(0,a.jsxs)(t.p,{children:["You can listen to incoming stage access requests or changes in the access requests list if you are a host. The SDK provides the\nfollowing callbacks to ",(0,a.jsx)(t.code,{children:"DyteStageEventsListener"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"class StageEventListener extends DyteStageEventsListener {\n  @override\n  void onPresentRequestAdded(DyteJoinedMeetingParticipant participant) {\n    // Called when a participant requests to join the stage. Triggered only if the local user is a host.\n  }\n\n  @override\n  void onPresentRequestClosed(DyteJoinedMeetingParticipant participant) {\n    // Called when a participant with a pending stage access request leaves the meeting.\n    // Triggered only if the local user is a host.\n  }\n\n  @override\n  void onPresentRequestRejected(DyteJoinedMeetingParticipant participant) {\n    // Called when a participant's stage access request is denied by the host.\n    // Triggered only if the local user is a host.\n  }\n\n  @override\n  void onPresentRequestWithdrawn(DyteJoinedMeetingParticipant participant) {\n    // Called when a participant cancels their stage access request.\n    // Triggered only if the local user is a host.\n  }\n\n  @override\n  void onStageRequestsUpdated(List<DyteJoinedMeetingParticipant> accessRequests) {\n      // Called when the list of stage access requests is updated.\n  }\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"You need to attach the listener to meeting client as follows:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"dyteClient.addStageEventsListener(StageEventsListener())\n"})}),"\n",(0,a.jsx)(t.p,{children:"These APIs enable you to manage stage access requests and participants effectively in Dyte meetings. Next, we'll explore the\nStage APIs available to Viewer participants."})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);