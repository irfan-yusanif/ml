"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["9715"],{51354:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>s,metadata:()=>i,assets:()=>p,toc:()=>c,contentTitle:()=>r});var i=JSON.parse('{"id":"participants/host-controls","title":"Host Controls","description":"Learn how to create and use a \\"More\\" menu for host control in your iOS app with our detailed documentation.","source":"@site/docs/ios/participants/host-controls.mdx","sourceDirName":"participants","slug":"/participants/host-controls","permalink":"/ios/participants/host-controls","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"image":"/static/ui-kit/1.x.x/components/more-menu.svg","sidebar_position":4,"description":"Learn how to create and use a \\"More\\" menu for host control in your iOS app with our detailed documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Participant Types","permalink":"/ios/participants/type-of-participants"},"next":{"title":"Pre-built create poll Scren","permalink":"/ios/Pre-Built-Polls_Guides/Polls"}}'),o=t("85893"),a=t("50065");let s={image:"/static/ui-kit/1.x.x/components/more-menu.svg",sidebar_position:4,description:'Learn how to create and use a "More" menu for host control in your iOS app with our detailed documentation.'},r="Host Controls",p={},c=[];function l(e){let n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"host-controls",children:"Host Controls"})}),"\n",(0,o.jsx)(n.p,{children:'This documentation explains how to create and utilize a "More" menu for host control in your iOS app.'}),"\n",(0,o.jsx)(n.p,{children:"To create the More menu, use the following code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-swift",children:'private func createMoreMenu(participantListener: DyteParticipantUpdateEventListener, indexPath: IndexPath) -> Bool {\n    var menus = [MenuType]()\n    let participant = participantListener.participant\n    let hostPermission = self.viewModel.mobileClient.localUser.permissions.host\n\n    if hostPermission.canPinParticipant {\n        if !participant.isPinned {\n            menus.append(.pin)\n        } else {\n            menus.append(.unPin)\n        }\n    }\n\n    if hostPermission.canMuteAudio && participant.audioEnabled {\n        menus.append(.muteAudio)\n    }\n\n    if hostPermission.canMuteVideo && participant.videoEnabled {\n        menus.append(.muteVideo)\n    }\n\n    if hostPermission.canKickParticipant && participant != self.viewModel.mobileClient.localUser {\n        menus.append(.kick)\n    }\n\n    if menus.isEmpty {\n        return false\n    }\n    menus.append(contentsOf: [.cancel])\n\n    let moreMenu = DyteMoreMenu(title: participant.name, features: menus, onSelect: { [weak self] menuType in\n        guard let self = self else { return }\n        switch menuType {\n        case .pin:\n            try? participant.pin()\n        case .unPin:\n            try? participant.unpin()\n        case .muteAudio:\n            try? participant.disableAudio()\n        case .muteVideo:\n            try? participant.disableVideo()\n        case .kick:\n            try? participant.kick()\n        case .cancel:\n            print("Operation cancelled")\n        default:\n            print("No action needed")\n        }\n    })\n    moreMenu.show(on: self.view)\n    return true\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"This code creates a \"More\" menu with various options based on the host's permissions and\nthe participant's current state. The menu allows the host to perform actions like pinning/unpinning\na participant, muting their audio or video, and kicking them from the session."})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);