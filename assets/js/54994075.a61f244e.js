"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["9471"],{39481:function(e,t,i){i.r(t),i.d(t,{default:()=>p,frontMatter:()=>s,metadata:()=>n,assets:()=>d,toc:()=>l,contentTitle:()=>o});var n=JSON.parse('{"id":"participants/introduction","title":"Introduction","description":"Learn about participants in Flutter and how to integrate participant features with Dyte\'s documentation. Follow our guide for a smooth introduction.","source":"@site/docs/flutter-core/participants/introduction.mdx","sourceDirName":"participants","slug":"/participants/introduction","permalink":"/flutter-core/participants/introduction","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"flutter-core","permalink":"/flutter-core/tags/flutter-core"},{"inline":true,"label":"participants","permalink":"/flutter-core/tags/participants"},{"inline":true,"label":"participant","permalink":"/flutter-core/tags/participant"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Introduction","description":"Learn about participants in Flutter and how to integrate participant features with Dyte\'s documentation. Follow our guide for a smooth introduction.","sidebar_position":1,"tags":["flutter-core","participants","participant"]},"sidebar":"tutorialSidebar","previous":{"title":"Livestreaming","permalink":"/flutter-core/livestream"},"next":{"title":"Participant Types","permalink":"/flutter-core/participants/"}}'),a=i("85893"),r=i("50065");let s={title:"Introduction",description:"Learn about participants in Flutter and how to integrate participant features with Dyte's documentation. Follow our guide for a smooth introduction.",sidebar_position:1,tags:["flutter-core","participants","participant"]},o="Introduction - Participants",d={},l=[{value:"Grid info for the room",id:"grid-info-for-the-room",level:2},{value:"Video view",id:"video-view",level:2},{value:"Move between pages in paginated mode",id:"move-between-pages-in-paginated-mode",level:2},{value:"Broadcast Message to all participants",id:"broadcast-message-to-all-participants",level:2},{value:"Video update for all participants",id:"video-update-for-all-participants",level:2},{value:"Audio update",id:"audio-update",level:2}];function c(e){let t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components},{Head:i}=t;return!i&&function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"introduction---participants",children:"Introduction - Participants"})}),"\n",(0,a.jsxs)(t.p,{children:["The data regarding all meeting participants is stored under ",(0,a.jsx)(t.code,{children:"participants"}),"\nobjects of ",(0,a.jsx)(t.code,{children:"DyteMobileClient()"})," instance. To get all the objects and methods\nrelated to participants:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"  final participants = dyteClient.participants;\n"})}),"\n",(0,a.jsx)(t.p,{children:"Use the methods and events to consume the participants data. For example, to get\nall the participants who joined the meeting:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"// get all joined participants\nfinal joinedParticipants = dyteClient.participants.joined;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"dyteClient.participants"})," object has the following properties."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"waitlisted"}),": A list that contains all the participants waiting to join the\nmeeting. All elements of this array are of type ",(0,a.jsx)(t.em,{children:"DyteWaitlistedParticipant"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"joined"}),": A list that contains all the participants who have joined the\nmeeting. All elements of this array are of type ",(0,a.jsx)(t.em,{children:"DyteJoinedMeetingParticipant"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"active"}),": A list that contains all the participants except the local user who\nare supposed to be on the screen at the moment. All elements of this array are of type ",(0,a.jsx)(t.em,{children:"DyteJoinedMeetingParticipant"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"screenshares"}),": A list that contains all the participants who have shared\nscreen in the meeting. All elements of this array are of type ",(0,a.jsx)(t.em,{children:"DyteJoinedMeetingParticipant"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"pinned"}),": Pinned participant of the meeting. It can be nullable as well. This is of type ",(0,a.jsx)(t.em,{children:"DyteJoinedMeetingParticipant"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Therefore, if you were to make a grid of participants, you'd use the ",(0,a.jsx)(t.code,{children:"active"}),"\nlist, but to display all participants in the meeting you'd use the ",(0,a.jsx)(t.code,{children:"joined"}),"\nlist."]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"dyteClient.pinned"})," is of type ",(0,a.jsx)(t.code,{children:"DyteJoinedMeetingParticipant"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:["All participant in each of the ",(0,a.jsx)(t.code,{children:"joined"}),", ",(0,a.jsx)(t.code,{children:"waitlisted"}),", ",(0,a.jsx)(t.code,{children:"active"}),", and\n",(0,a.jsx)(t.code,{children:"screenshares"})," list is of type ",(0,a.jsx)(t.code,{children:"DyteJoinedMeetingParticipant"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"grid-info-for-the-room",children:"Grid info for the room"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"DyteGridPagesInfo"})," object is designed to help you with pagination decisions. It\nis returned with ",(0,a.jsx)(t.code,{children:"onGridUpdated"})," event. It contains the following properties:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"currentPageNumber"}),": Int, returns the current page number (currently displayed\nby the client)."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"pageCount"}),": Int, max pages possible with current number of participants."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"isNextPagePossible"}),": bool, if the next page of participants is available."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"isPreviousPagePossible"}),": bool, if previous page of participants is available."]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"video-view",children:"Video view"}),"\n",(0,a.jsxs)(t.p,{children:["To access the video view of a participant, create an object of the ",(0,a.jsx)(t.code,{children:"VideoView"})," class."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"// To show the video of a participant\nfinal videoView = VideoView(meetingParticipant: participant);\n// To get video view for a local user\nfinal selfVideoView = VideoView(isSelfTrue: true);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"move-between-pages-in-paginated-mode",children:"Move between pages in paginated mode"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"setPage(int pageNumber)"})," method allows you to switch between pages of\nparticipants present in the meeting."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.em,{children:"Note: Indexing of page starts from 0"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"// switch to page 1\ndyteClient.setPage(1);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"broadcast-message-to-all-participants",children:"Broadcast Message to all participants"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:'// payload is a Map<String, dynamic>\nconst payload = {\n  "message": "Hello World",\n};\ndyteClient.broadcastMessage("type", payload);\n'})}),"\n",(0,a.jsx)(t.h2,{id:"video-update-for-all-participants",children:"Video update for all participants"}),"\n",(0,a.jsx)(t.p,{children:"Triggered when any participant of the meeting enable/disable it's video. It also passes the participant details who has updated it's video status."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"class ParticipantNotifier implements DyteParticipantEventsListener{\n\n  ...\n  @override\n  void onVideoUpdate(\n    bool videoEnabled,\n    DyteJoinedMeetingParticipant participant,\n  ) {\n    //\n  }\n  ...\n}\n\n\n"})}),"\n",(0,a.jsx)(t.h2,{id:"audio-update",children:"Audio update"}),"\n",(0,a.jsx)(t.p,{children:"Triggered when any participant of the meeting enable/disable it's audio. It also passes the participant details who has updated it's audio status."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"\nclass ParticipantNotifier implements DyteParticipantEventsListener{\n\n  ...\n  @override\n  void onAudioUpdate(\n    bool audioEnabled,\n    DyteJoinedMeetingParticipant participant,\n  ) {\n    //\n  }\n  ...\n}\n\n"})}),"\n",(0,a.jsxs)(i,{children:[(0,a.jsx)("title",{children:"Flutter Core Introduction"}),(0,a.jsx)("meta",{name:"description",content:"Learn about participants in Flutter and how to integrate participant features with Dyte's documentation. Follow our guide for a smooth introduction."})]})]})}function p(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);