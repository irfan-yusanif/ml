"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["9483"],{46795:function(e,i,n){n.r(i),n.d(i,{default:()=>h,frontMatter:()=>a,metadata:()=>l,assets:()=>s,toc:()=>o,contentTitle:()=>r});var l=JSON.parse('{"id":"pre-call/media-preview","title":"Media Preview","description":"Before joining a meeting, users may want to preview and configure their media devices like camera, microphone, and audio output.","source":"@site/docs/flutter-core/pre-call/1-media-preview.mdx","sourceDirName":"pre-call","slug":"/pre-call/media-preview","permalink":"/flutter-core/pre-call/media-preview","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Quickstart","permalink":"/flutter-core/"},"next":{"title":"Meeting Metadata","permalink":"/flutter-core/pre-call/meeting-meta"}}'),d=n("85893"),t=n("50065");let a={},r="Media Preview",s={},o=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Toggling Media",id:"toggling-media",level:3},{value:"Changing Media Device",id:"changing-media-device",level:3}];function c(e){let i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(i.header,{children:(0,d.jsx)(i.h1,{id:"media-preview",children:"Media Preview"})}),"\n",(0,d.jsx)(i.p,{children:"Before joining a meeting, users may want to preview and configure their media devices like camera, microphone, and audio output.\nThis section provides developers with the tools to prepare the media environment before joining a Dyte meeting."}),"\n",(0,d.jsxs)(i.p,{children:["If you are using our UI Kits, this functionality can be handled by ",(0,d.jsx)(i.code,{children:"DyteSetupScreen"})," or built with ",(0,d.jsx)(i.code,{children:"DyteParticipantTile"})," widget."]}),"\n",(0,d.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,d.jsxs)(i.ul,{children:["\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"dyteMobileClient.localUser.audioEnabled"}),": A ",(0,d.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the audio currently enabled."]}),"\n",(0,d.jsxs)(i.li,{children:[(0,d.jsx)(i.code,{children:"dyteMobileClient.localUser.videoEnabled"}),": A ",(0,d.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the video currently enabled."]}),"\n"]}),"\n",(0,d.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,d.jsx)(i.h3,{id:"toggling-media",children:"Toggling Media"}),"\n",(0,d.jsx)(i.p,{children:"The same methods used for controlling media during a meeting are also applicable for pre-call media configuration."}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"1. Mute/Unmute microphone"})}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-dart",children:"// Mute Audio\ndyteMobileClient.localUser.disableAudio()\n\n// Unmute Audio\ndyteMobileClient.localUser.enableAudio()\n\n"})}),"\n",(0,d.jsx)(i.mermaid,{value:'flowchart LR\n    classDef basic fill:white;\n\n    eam("enableAudio()") --\x3e success("Gives <code>onAudioUpdate</code> callback to <code>DyteSelfEventsListener</code>")\n\n    class eam basic;'}),"\n",(0,d.jsx)("br",{}),"\n",(0,d.jsxs)(i.p,{children:["Anytime there is an update in the audio state of the local user, the Core SDK notifies the client through the ",(0,d.jsx)(i.code,{children:"onAudioUpdate"})," callback\nfrom ",(0,d.jsx)(i.code,{children:"DyteSelfEventsListener"}),". Here's how you can register the listener:"]}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-dart",children:"class SelfAudioNotifier extends DyteSelfEventsListener{\n    override fun onAudioUpdate(bool audioEnabled) {\n    // Show local user's VideoView if video is enabled\n    }\n}\n\ndyteMobileClient.addSelfEventsListener(SelfAudioNotifier())\n"})}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"2. Enable/Disable camera"})}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-dart",children:"// Disable Video\ndyteMobileClient.localUser.disableVideo()\n\n// Enable Video\ndyteMobileClient.localUser.enableVideo()\n"})}),"\n",(0,d.jsx)(i.mermaid,{value:'flowchart LR\n    classDef basic fill:white;\n\n    eam("enableVideo()") --\x3e success("Gives <code>onVideoUpdate</code> callback to <code>DyteSelfEventsListener</code>")\n\n    class eam basic;'}),"\n",(0,d.jsx)("br",{}),"\n",(0,d.jsxs)(i.p,{children:["Whenever there is an update in the video state of the local user, the Core SDK notifies the client through the ",(0,d.jsx)(i.code,{children:"onVideoUpdate"})," callback\nfrom ",(0,d.jsx)(i.code,{children:"DyteSelfEventsListener"}),". Here's how you can register the listener:"]}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-dart",children:"class SelfVideoNotifier extends DyteSelfEventsListener{\n    override fun onVideoUpdate(bool videoEnabled) {\n        // Show local user's VideoView if video is enabled\n    }\n}\n\ndyteMobileClient.addSelfEventsListener(SelfVideoNotifier());\n"})}),"\n",(0,d.jsx)(i.h3,{id:"changing-media-device",children:"Changing Media Device"}),"\n",(0,d.jsx)(i.p,{children:"Media devices represent the hardware for the camera, microphone, and speaker devices. To get the list of media devices currently\navailable, use the following methods:"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-dart",children:"// Get all audio devices\nfinal audioDevices = dyteMobileClient.localUser.getAudioDevices()\n\n// Get all video devices\nfinal videoDevices = dyteMobileClient.localUser.getVideoDevices()\n"})}),"\n",(0,d.jsx)(i.p,{children:"To get the currently selected media device, use the following methods:"}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-dart",children:"// Get current audio device being used\nfinal currentAudioDevice = dyteMobileClient.localUser.getSelectedAudioDevice()\n\n// Get current video device being used\nfinal currentVideoDevice = dyteMobileClient.localUser.getSelectedVideoDevice()\n"})}),"\n",(0,d.jsx)(i.p,{children:"Use these methods to create a UI that allows users to configure their media devices. When the user selects a device, use the below methods to set the device."}),"\n",(0,d.jsx)(i.p,{children:(0,d.jsx)(i.strong,{children:"Set device"})}),"\n",(0,d.jsx)(i.pre,{children:(0,d.jsx)(i.code,{className:"language-kotlin",children:"// Set audio device\ndyteMobileClient.localUser.setAudioDevice(device)\n// eg. device = audioDevices[0]\n\n// Set video device\ndyteMobileClient.localUser.setVideoDevice(device)\n// eg. device = videoDevices[0]\n"})})]})}function h(e={}){let{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,d.jsx)(i,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}}}]);