"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([["2939"],{54414:function(e,t,n){n.r(t),n.d(t,{default:()=>l,frontMatter:()=>c,metadata:()=>i,assets:()=>s,toc:()=>p,contentTitle:()=>d});var i=JSON.parse('{"id":"participants/events","title":"Participant Events","description":"Explore events related to participants in Flutter. Follow our documentation for effective handling of participant events in your Flutter app.","source":"@site/docs/flutter-core/participants/events.mdx","sourceDirName":"participants","slug":"/participants/events","permalink":"/flutter-core/participants/events","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"flutter-core","permalink":"/flutter-core/tags/flutter-core"},{"inline":true,"label":"participants","permalink":"/flutter-core/tags/participants"},{"inline":true,"label":"self","permalink":"/flutter-core/tags/self"}],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Participant Events","description":"Explore events related to participants in Flutter. Follow our documentation for effective handling of participant events in your Flutter app.","sidebar_position":3,"tags":["flutter-core","participants","self"]},"sidebar":"tutorialSidebar","previous":{"title":"Participant Object","permalink":"/flutter-core/participants/participant-object"},"next":{"title":"Waitlisted Participants","permalink":"/flutter-core/participants/waitlisted-participants"}}'),a=n("85893"),r=n("50065");let c={title:"Participant Events",description:"Explore events related to participants in Flutter. Follow our documentation for effective handling of participant events in your Flutter app.",sidebar_position:3,tags:["flutter-core","participants","self"]},d=void 0,s={},p=[{value:"Participant joined",id:"participant-joined",level:2},{value:"Participant updated",id:"participant-updated",level:2},{value:"Participant left",id:"participant-left",level:2},{value:"Video update",id:"video-update",level:2},{value:"Audio update",id:"audio-update",level:2},{value:"Screen share update",id:"screen-share-update",level:2},{value:"Screen share participants list",id:"screen-share-participants-list",level:2},{value:"Screen share view",id:"screen-share-view",level:2},{value:"Active Participants changed",id:"active-participants-changed",level:2}];function o(e){let t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components},{Head:n}=t;return!n&&function(e,t){throw Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"participant-joined",children:"Participant joined"}),"\n",(0,a.jsx)(t.p,{children:"Trigger an event when any participant joins the meeting."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"class ParticipantsEventListener extends DyteParticipantEventsListener {\n  ...\n  @override\n  void onParticipantJoin(DyteJoinedMeetingParticipant participant) {\n    // your code here to handle new participant\n  }\n  ...\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"participant-updated",children:"Participant updated"}),"\n",(0,a.jsx)(t.p,{children:"Trigger an event when any participant update in meeting. For example, when a participant changes their name."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"...\n\n@override\nvoid onParticipantUpdated(DyteJoinedMeetingParticipant participant) {\n         // your code here to handle new participant\n}\n\n...\n"})}),"\n",(0,a.jsx)(t.h2,{id:"participant-left",children:"Participant left"}),"\n",(0,a.jsx)(t.p,{children:"Trigger an event when any participant leaves the meeting."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"...\n\n@override\nvoid onParticipantLeave(DyteJoinedMeetingParticipant participant) {\n         // your code here to handle participant left from meeting\n}\n\n...\n"})}),"\n",(0,a.jsx)(t.h2,{id:"video-update",children:"Video update"}),"\n",(0,a.jsx)(t.p,{children:"Trigger an event when any participant starts or stops the video."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"...\n\n@override\nvoid onVideoUpdate({\n required bool videoEnabled,\n required DyteJoinedMeetingParticipant participant,\n}) {\n         // your code here to handle participant video toggle update\n}\n\n...\n"})}),"\n",(0,a.jsx)(t.h2,{id:"audio-update",children:"Audio update"}),"\n",(0,a.jsx)(t.p,{children:"Triggers an event when a participant starts or stops the audio."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"...\n\n@override\nvoid onAudioUpdate({\n required bool audioEnabled,\n required DyteJoinedMeetingParticipant participant,\n}) {\n    // your code here to handle participant audio toggle update\n}\n\n...\n"})}),"\n",(0,a.jsx)(t.h2,{id:"screen-share-update",children:"Screen share update"}),"\n",(0,a.jsx)(t.p,{children:"Triggers an event when a participant starts or stops screen share."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"...\n\n@override\nvoid onScreenShareStarted(DyteJoinedMeetingParticipant participant) {\n  /// handle screen share started of `DyteJoinedMeetingParticipant` participant\n}\n\n@override\nvoid onScreenShareEnded(DyteJoinedMeetingParticipant participant) {\n  /// handle screen share ended of `DyteJoinedMeetingParticipant` participant\n}\n\n...\n"})}),"\n",(0,a.jsx)(t.h2,{id:"screen-share-participants-list",children:"Screen share participants list"}),"\n",(0,a.jsxs)(t.p,{children:["Obtain the list of the screenshare participants, using the ",(0,a.jsx)(t.code,{children:"participants.screenshares"})," function which returns a ",(0,a.jsx)(t.code,{children:"DyteRoomParticipants"})," object that maintains a record of participants who have joined, pinned, and screenshared. This object updates with each ",(0,a.jsx)(t.code,{children:"onUpdate"})," call."]}),"\n",(0,a.jsx)(t.h2,{id:"screen-share-view",children:"Screen share view"}),"\n",(0,a.jsxs)(t.p,{children:["To get the screenshare widget, create an object of the ",(0,a.jsx)(t.code,{children:"ScreenshareView"})," class."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"// To show screenshare of a participant\nfinal screenshareView = ScreenShareView(meetingParticipant);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"active-participants-changed",children:"Active Participants changed"}),"\n",(0,a.jsx)(t.p,{children:"This event is triggered when the active participant changes, for example, when the user moves to the next page of participants. It provides the list of participants on the current page."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-dart",children:"...\n\n@override\nvoid onActiveParticipantsChanged(List<DyteJoinedMeetingParticipant> active) {\n  /// handle active participants changed\n}\n\n...\n"})}),"\n",(0,a.jsx)(t.p,{children:"Other events:"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"Event"})}),(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"Description"})})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"onActiveSpeakerChanged"})}),(0,a.jsx)(t.td,{children:"Triggered when active speaker is change. Updated active speaker is sent as payload."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"onNoActiveSpeaker"})}),(0,a.jsx)(t.td,{children:"Triggered when there is no active participant."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"onParticipantPinned"})}),(0,a.jsx)(t.td,{children:"Triggered when a participant is pinned. Pinned participant details is sent as payload."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"onParticipantUnpinned"})}),(0,a.jsx)(t.td,{children:"Triggered when a participant is unpinned. Unpinned participant details is sent as payload."})]})]})]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("title",{children:"Flutter Core Participant Events"}),(0,a.jsx)("meta",{name:"description",content:"Explore events related to participants in Flutter. Follow our documentation for effective handling of participant events in your Flutter app."})]})]})}function l(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);